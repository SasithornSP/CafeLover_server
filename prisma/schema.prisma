// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model user {
  id              Int        @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String?    @unique
  mobile          String?    @unique
  password        String
  role            Role       @default(USER)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  orders          order[]
  cartItems       cartItem[]
  receipts        receipt[]
  points          point[]
}

model category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  product[]
}

model product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId Int
  category   category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems orderItem[]
  cartItems  cartItem[]
}

model order {
  id         Int      @id @default(autoincrement())
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId     Int
  user       user        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems orderItem[]
}

model orderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId   Int
  order     order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  receipt   receipt? @relation(fields: [receiptId], references: [id], onDelete: SetNull)
  receiptId Int?
}

model cartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    Int
  user      user    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model receipt {
  id         Int      @id @default(autoincrement())
  totalPrice Float
  queqe      Int      @default(0)
  createdAt  DateTime @default(now())

  userId     Int
  user       user        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems orderItem[]
}

model point {
  id        Int      @id @default(autoincrement())
  point     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   user @relation(fields: [userId], references: [id], onDelete: Cascade)
}
